package Lego2.sandbox.Foo;

/*Generated by MPS */

import javax.swing.JFrame;
import java.awt.Color;
import java.awt.Graphics;
import javax.swing.JPanel;
import java.awt.Dimension;

public class Foo extends JFrame {
  public static class Robot {
    private int x;
    private int y;
    private int boundary_xpos;
    private int boundary_ypos;
    private int boundary_length;
    private int boundary_width;

    public enum Orientation {
      NORTH(),
      EAST(),
      SOUTH(),
      WEST()
    }

    private Foo.Robot.Orientation orientation;
    private Color color;

    public Robot(int x, int y, Foo.Robot.Orientation orientation, Color color) {
      this.x = x;
      this.y = y;
      this.orientation = orientation;
      this.color = color;
    }

    public void Fwd(Graphics graphics, int units) {
      int x1 = this.x;
      int y1 = this.y;

      switch (this.orientation) {
        case NORTH:
          y1 -= units;
          break;
        case SOUTH:
          y1 += units;
          break;
        case WEST:
          x1 -= units;
          break;
        case EAST:
          x1 += units;
          break;
      }

      if ((x1 < this.boundary_xpos) || (x1 > this.boundary_length)) {
        String s = "Out of Bounds";
        throw new RuntimeException(s);
      }

      if ((y1 < this.boundary_ypos) || y1 > this.boundary_width) {
        String s = "Out of Bounds";
        throw new RuntimeException(s);

      }

      graphics.setColor(this.color);
      graphics.drawLine(this.x, this.y, x1, y1);
      this.x = x1;
      this.y = y1;
    }

    public void Left() {
      switch (this.orientation) {
        case SOUTH:
          this.orientation = Foo.Robot.Orientation.EAST;
          break;
        case EAST:
          this.orientation = Foo.Robot.Orientation.NORTH;
          break;
        case NORTH:
          this.orientation = Foo.Robot.Orientation.WEST;
          break;
        case WEST:
          this.orientation = Foo.Robot.Orientation.SOUTH;
          break;
      }
    }

    public void Right() {
      switch (this.orientation) {
        case SOUTH:
          this.orientation = Foo.Robot.Orientation.WEST;
          break;
        case EAST:
          this.orientation = Foo.Robot.Orientation.SOUTH;
          break;
        case NORTH:
          this.orientation = Foo.Robot.Orientation.EAST;
          break;
        case WEST:
          this.orientation = Foo.Robot.Orientation.NORTH;
          break;
      }
    }

    public void Start(int xpos, int ypos) {
      this.x = xpos;
      this.y = ypos;
    }

    public void Set_Boundary(int xpos, int ypos, int length, int width) {
      this.boundary_xpos = xpos;
      this.boundary_ypos = ypos;
      this.boundary_length = length;
      this.boundary_width = width;
    }
  }


  private JPanel panel = new JPanel() {
    @Override
    protected void paintComponent(Graphics graphics) {
      super.paintComponent(graphics);
      Foo.Robot robot = new Foo.Robot(0, 0, Foo.Robot.Orientation.EAST, Color.BLACK);
      robot.Set_Boundary(0, 0, 500, 500);
      graphics.drawRect(0, 0, 500, 500);
      robot.Start(10, 10);
      robot.Fwd(graphics, 100);
      robot.Right();
      robot.Fwd(graphics, 100);
      robot.Right();
      robot.Fwd(graphics, 1000);
    }
  };

  public void initialize() {
    this.setTitle("Foo");
    this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
    this.add(panel);
    panel.setPreferredSize(new Dimension(500, 500));
    this.pack();
    this.setVisible(true);
  }

  public static void main(String[] args) {
    Foo route = new Foo();
    route.initialize();
  }
}
